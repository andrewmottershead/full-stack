// import {useContext} from 'react';
import Head from 'next/head';
import Link from "next/link";

import { getSession, withPageAuthRequired } from "@auth0/nextjs-auth0";

import { dehydrate, QueryClient } from "@tanstack/react-query";
import { fetchProducts } from "@/lib/api-functions/server/products/queries";
import { STORAGE_KEY } from "@/lib/tq/products/settings";

import { log } from "@/lib/utils/formatters";

import { Button, ButtonGroup } from '@/components/mui';
import Layout from '@/components/Layout';
import Heading from '@/components/Heading';
import QueryBoundaries from "@/components/QueryBoundaries";
import ProductList from "@/components/ProductList";
import { useDelete } from '@/lib/tq/products/mutations';


export default function AdminProductList() {
    const removeMutation = useDelete();

    const removeHandler = (id) => {
        removeMutation.mutate(id);
    };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Heading component="h2">Admin Home</Heading>

        <ButtonGroup
          variant="contained"
          aria-label="outlined primary button group"
        >
          <Button
            variant="contained"
            component={Link}
            href={`/admin/products/`}
          >
            List Products
          </Button>
          <Button
            variant="contained"
            component={Link}
            href={`/admin/products/add`}
          >
            Add Product
          </Button>
          <Button variant="contained" component={Link} href={`/admin/baskets/`}>
            List Baskets
          </Button>
          <Button variant="contained" component={Link} href={`/admin/orders/`}>
            List Orders
          </Button>
        </ButtonGroup>
      </Layout>
    </>
  )
}

export const getServerSideProps = withPageAuthRequired({
  async getServerSideProps() {
    return {
      props: {},
    };
  },
});

// export async function getStaticProps(context) {
//   // console.log("LLLL", context);
//   const products = await fetchProducts().catch((err) => console.log(err));
//   const queryClient = new QueryClient();


//   // If this was remote we'd use 'prefetchQuery' but as we know it we use 'setQueryData'
//   await queryClient.setQueryData(
//     [STORAGE_KEY],
//     JSON.parse(JSON.stringify(products))
//   );

//   return {
//     props: {
//       dehydratedState: dehydrate(queryClient),
//     },
//   };
// }